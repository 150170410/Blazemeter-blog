<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="4.0" jmeter="4.0 r1823414">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="serverURL" elementType="Argument">
            <stringProp name="Argument.name">serverURL</stringProp>
            <stringProp name="Argument.value">localhost</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="sport" elementType="Argument">
            <stringProp name="Argument.name">sport</stringProp>
            <stringProp name="Argument.value">8080</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="spath" elementType="Argument">
            <stringProp name="Argument.name">spath</stringProp>
            <stringProp name="Argument.value">memory</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="rtime" elementType="Argument">
            <stringProp name="Argument.name">rtime</stringProp>
            <stringProp name="Argument.value">20</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="sleepTime" elementType="Argument">
            <stringProp name="Argument.name">sleepTime</stringProp>
            <stringProp name="Argument.value">10</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
        <collectionProp name="CookieManager.cookies"/>
        <boolProp name="CookieManager.clearEachIteration">false</boolProp>
      </CookieManager>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler" enabled="true">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters">${serverURL} ${sport} ${spath} ${rtime} ${sleepTime}</stringProp>
          <stringProp name="script">import com.launchdarkly.eventsource.EventSource;
import com.launchdarkly.eventsource.EventHandler;
import com.launchdarkly.eventsource.MessageEvent;
import java.net.URI;
import java.util.concurrent.TimeUnit;

public class SimpleEventHandler implements EventHandler {

//	@Override
	public void onOpen() throws Exception{
		log.info(&quot;The connectionhas been opened&quot;);
	}

//	@Overide
	public void onClosed() throws Exception{
		log.info(&quot;The connection has been closed&quot;);
	}

//	@Override
	public void onMessage(String Event, MessageEvent messageEvent) throws Exception{
		log.info(messageEvent.getData());
	}

//	@Override
	public void onComment(String comment) throws Exception{
		log.info(comment);
	}

//	@Override
	public void onError(Throwable t){
		log.info(&quot;Error &quot;+t);
	}
}

	EventHandler eH = new SimpleEventHandler();
	String url = &quot;http://&quot;+args[0]+&quot;:&quot;+args[1]+&quot;/&quot;+args[2];
//	log.info(url);
	EventSource.Builder builder = new EventSource.Builder(eH, URI.create(url));

	EventSource eventSource = builder.build();
	eventSource.setReconnectionTimeMS(Integer.parseAsInteger(args[3]));
	eventSource.start();
	TimeUnit.Minutes.sleep(Integer.parseAsInteger(args[4]));
	</stringProp>
          <stringProp name="scriptLanguage">java</stringProp>
        </JSR223Sampler>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
